from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from config import BOT_TOKEN, ADMINS
from excel import check_user, save_vote, get_nomination_candidates, change_status, reload_data, is_voting_closed, close_voting_for_nomination, open_voting
from utils import add_user, get_all_users
from dataclasses import asdict, dataclass
import asyncio


@dataclass
class Visitor:
    user_id: str
    surname: str
    name: str
    batchestvo: str
    group: str
    top_creative: str
    top_curators: str
    top_freshman: str
    top_group: str
    top_headman: str
    top_it_person: str
    top_project: str


storage = MemoryStorage()

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=storage)

active_sessions = {}
active_nominations = {}
nominations = ["TOP GROUP", "TOP CURATORS", "TOP FRESHMAN", "TOP HEADMAN", "TOP PROJECT", "TOP CREATIVE PERSON", "TOP IT PERSON"]
list_vote = []



@dp.message_handler(commands=["start"])
async def command_start(message: types.Message):
    await message.answer("–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, –¥–∞–º—ã –∏ –≥–æ—Å–ø–æ–¥–∞! üåü\n\n"
                         "–° —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –Ω–∞ –¥–æ–ª–≥–æ–∂–¥–∞–Ω–Ω–æ–º –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ TOP HSCM&S!\n\n"
                         "–í–∞—Å –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –º–Ω–æ–≥–æ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–≥–æ. –ö–∞–∂–¥—ã–π –∏–∑ –≤–∞—Å —Å–º–æ–∂–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ "
                         "–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, –Ω–æ –∏ –ø—Ä–∏–Ω—è—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è. "
                         "–ò —ç—Ç–æ –±—É–¥–µ—Ç –≤–∞—à–∏–º —à–∞–Ω—Å–æ–º –ø–æ–¥–∞—Ä–∏—Ç—å –∑–∞—Å–ª—É–∂–µ–Ω–Ω—ã–µ –æ–≤–∞—Ü–∏–∏ —Ç–µ–º, –∫—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ shines!\n\n"
                         "–ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –∏–∑ –≤–∞—Å —Å—Ç–∞–Ω–µ—Ç —á–∞—Å—Ç—å—é —ç—Ç–æ–≥–æ –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è, –≤–µ–¥—å —Å–µ–≥–æ–¥–Ω—è –º—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ "
                         "–≤—ã–±–∏—Ä–∞–µ–º, –∞ –æ—Ç–º–µ—á–∞–µ–º —Ç–∞–ª–∞–Ω—Ç—ã, —Å—Ç—Ä–µ–º–ª–µ–Ω–∏—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.\n\n"
                         "–ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è —Å–∏—è—é—Ç –≤—Å–µ! ‚ú® –ì–æ—Ç–æ–≤—ã? –ù–∞—á–∏–Ω–∞–µ–º!")
    await message.answer("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º! –í–≤–µ–¥–∏—Ç–µ /login –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã")


@dp.message_handler(commands=["help"])
async def command_help(message: types.Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n/login - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
        "\n/show_vote - –ü–æ–∫–∞–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–∏–Ω–∞—Ü–∏–π –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è\n/vote - –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"
        "\n/contacts - –°–æ–∑–¥–∞—Ç–µ–ª–∏ –±–æ—Ç–∞"
        "\n/me - –ü–æ–∫–∞–∑ –í–∞—à–∏—Ö –≥–æ–ª–æ—Å–æ–≤ –∑–∞ –≤—Å–µ –Ω–æ–º–∏–Ω–∞—Ü–∏–∏"
        "\n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ –±—ã–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –±–æ—Ç–µ, —Ç–æ "
        "—Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º @frlsua (–õ–µ—Ä–∞ –°–µ–º–µ–Ω–æ–≤–∞). –°–ø–∞—Å–∏–±–æ!"
        
    )

@dataclass
class form(StatesGroup):
    wait_message = State()

@dp.message_handler(commands=["login"])
async def command_login(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n"
                         "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ –ü–æ–ª–Ω—ã–π(!) –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã\n\n"
                         "–ü—Ä–∏–º–µ—Ä:"
                         "–°–µ–º–µ–Ω–æ–≤–∞ –í–∞–ª–µ—Ä–∏—è –û–ª–µ–≥–æ–≤–Ω–∞ 15.27–î-–ú–û01/23–±")
    await form.wait_message.set()

@dp.message_handler(state=form.wait_message)
async def login_info(message: types.Message, state: FSMContext):
    info = message.text

    if len(info.split(" ")) != 4:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\n–í–≤–µ–¥–∏—Ç–µ /login)")
        return
    if len(info.split(" ")) == 4:
        surname, name, batchestvo, group = info.split(" ")
        if check_user(surname, name, batchestvo, group):
            vis = Visitor(
                user_id=message.from_user.id,
                surname=surname,
                name=name,
                batchestvo=batchestvo,
                group=group,
                top_creative="",
                top_curators="",
                top_freshman="",
                top_group="",
                top_headman="",
                top_it_person="",
                top_project=""
            )
            list_vote.append(vis)
            active_sessions[message.from_user.id] = vis
            change_status(surname, name, batchestvo, group)
            add_user(message.from_user.id)
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        else:
            await message.answer("–í—ã –Ω–µ –∑–Ω–∞—á–∏—Ç–µ—Å—å –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Å—Ç–µ–π! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
    await state.finish()


@dp.message_handler(commands=["contacts"])
async def process_contacts_command(message: types.Message):
    await message.answer(
        "–ë–æ—Ç –±—ã–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ IT-–∫–ª—É–±–∞ - https://vk.com/err.itclub"
        "\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏:\n–§–∞–∫–æ–≤–∞ –ù–∞—Å—Ç—è - @monresu\n–°–µ–º–µ–Ω–æ–≤–∞ –í–∞–ª–µ—Ä–∏—è - @frlsua"
    )


@dp.message_handler(commands=["show_vote"])
async def process_show_vote_command(message: types.Message):
    if len(active_nominations) == 0:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –µ—â—ë –Ω–µ –æ—Ç–∫—Ä—ã—Ç–æ")
    else:
        txt = "–ù–æ–º–∏–Ω–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: \n"
        i = 1
        for nomination in active_nominations:
            txt += f"{i}. {nomination}\n"
        await message.answer(txt)

async def vote_filter(message: types.Message) -> bool:
    if not message.text.startswith('/vote'):
        return False
    if message.text.strip() == '/vote':
        await message.answer("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–º–∏–Ω–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return False
    command = message.text[:5]
    nomination = message.text[6:].upper()
    if nomination not in nominations:
        await message.answer("–¢–∞–∫–æ–π –Ω–æ–º–∏–Ω–∞—Ü–∏–∏ –Ω–µ—Ç. –í—Å–µ–≥–æ 7 –Ω–æ–º–∏–Ω–∞—Ü–∏–π:\n"
                             "\n1. TOP GROUP\n2. TOP CURATORS\n3. TOP HEADMAN\n4. TOP FRESHMAN\n5. TOP CREATIVE PERSON"
                             "\n6. TOP PROJECT\n7. TOP IT PERSON"
                             "\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return False
    if nomination in nominations and nomination not in active_nominations:
        await message.answer("–î–∞–Ω–Ω–∞—è –Ω–æ–º–∏–Ω–∞—Ü–∏—è –µ—â—ë –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –ø–æ–∑–∂–µ")
        return False
    return True

@dp.message_handler(vote_filter)
async def vote_cool(message: types.Message):
    nomination = message.text[6:].upper()
    candidates = get_nomination_candidates(nomination)

    keyboard = InlineKeyboardMarkup()
    for candidate in candidates:
        keyboard.add(InlineKeyboardButton(text=candidate, callback_data=f"vote_{nomination}_{candidate}"))

    text = f"üó≥ –û—Ç–∫—Ä—ã—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –Ω–æ–º–∏–Ω–∞—Ü–∏—é: *{nomination}*\n\n–ö–∞–Ω–¥–∏–¥–∞—Ç—ã:\n"
    for i, candidate in enumerate(candidates, start=1):
        text += f"{i}. {candidate}\n"
    text += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"

    await bot.send_message(chat_id=message.chat.id, text=text, reply_markup=keyboard, parse_mode="Markdown")

@dp.message_handler(vote_filter)
async def vote_cool(message: types.Message):
    user_id = message.from_user.id

    visitor = active_sessions.get(user_id)
    if not visitor:
        await message.reply("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /login –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return

    nomination = message.text[6:].upper()
    candidates = get_nomination_candidates(nomination)

    if not candidates:
        await message.reply(f"–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è –Ω–æ–º–∏–Ω–∞—Ü–∏–∏ '{nomination}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    user_vote = getattr(visitor, f"top_{nomination.lower()}", None)
    if user_vote:
        await message.reply(
            f"–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –Ω–æ–º–∏–Ω–∞—Ü–∏—é '{nomination}'. –í–∞—à –≤—ã–±–æ—Ä: '{user_vote}'.",
            parse_mode="Markdown"
        )
        return

    keyboard = InlineKeyboardMarkup()
    for candidate in candidates:
        keyboard.add(InlineKeyboardButton(text=candidate, callback_data=f"vote_{nomination}_{candidate}"))

    text = f"üó≥ –û—Ç–∫—Ä—ã—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –Ω–æ–º–∏–Ω–∞—Ü–∏—é: *{nomination}*\n\n–ö–∞–Ω–¥–∏–¥–∞—Ç—ã:\n"
    for i, candidate in enumerate(candidates, start=1):
        text += f"{i}. {candidate}\n"
    text += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."

    await bot.send_message(chat_id=message.chat.id, text=text, reply_markup=keyboard, parse_mode="Markdown")



@dp.message_handler(commands=["open_vote"])
async def open_vote(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–∏–Ω–∞—Ü–∏—é. –í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–æ–º–∏–Ω–∞—Ü–∏–∏:"
                            "\n/open_vote TOP GROUP"
                            "\n/open_vote TOP CURATORS"
                            "\n/open_vote TOP HEADMAN"
                            "\n/open_vote TOP FRESHMAN"
                            "\n/open_vote TOP PROJECT"
                            "\n/open_vote TOP CREATIVE PERSON"
                            "\n/open_vote TOP IT PERSON")
        return

    nomination = args[1].strip()
    candidates = get_nomination_candidates(nomination)

    if is_voting_closed(nomination):
        open_voting(nomination)

    if not candidates:
        await message.reply(f"–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è –Ω–æ–º–∏–Ω–∞—Ü–∏–∏ '{nomination}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    active_nominations[nomination] = candidates

    async with state.proxy() as data:
        data["nomination"] = nomination
        data["candidates"] = candidates
        print(data, '123')

    text = f"üó≥ –û—Ç–∫—Ä—ã—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –Ω–æ–º–∏–Ω–∞—Ü–∏—é: *{nomination}*\n\n–ö–∞–Ω–¥–∏–¥–∞—Ç—ã:\n"
    for i, candidate in enumerate(candidates, start=1):
        text += f"{i}. {candidate}\n"
    text += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."

    keyboard = InlineKeyboardMarkup()
    for candidate in candidates:
        keyboard.add(InlineKeyboardButton(text=candidate, callback_data=f"vote_{nomination}_{candidate}"))

    users = get_all_users()
    for user_id in users:
        try:
            await bot.send_message(chat_id=user_id, text=text, reply_markup=keyboard, parse_mode="Markdown")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await message.reply(f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –Ω–æ–º–∏–Ω–∞—Ü–∏—é '{nomination}' –Ω–∞—á–∞–ª–æ—Å—å!")


@dp.message_handler(commands=["close_vote"])
async def close_vote(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–∏–Ω–∞—Ü–∏—é. –ü—Ä–∏–º–µ—Ä: /close_vote –°—Ç–∞—Ä–æ—Å—Ç–∞")
        return

    nomination = args[1].strip()

    candidates = get_nomination_candidates(nomination)
    if not candidates:
        await message.reply(f"–ù–æ–º–∏–Ω–∞—Ü–∏—è '{nomination}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    close_voting_for_nomination(nomination)
    
    del active_nominations[f'{nomination}']
    users = get_all_users()
    for user_id in users:
        try:
            await bot.send_message(
                chat_id=user_id,
                text=f"‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –Ω–æ–º–∏–Ω–∞—Ü–∏—é '{nomination}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!"
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    await message.reply(f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –Ω–æ–º–∏–Ω–∞—Ü–∏—é '{nomination}' –∑–∞–∫—Ä—ã—Ç–æ!")


@dp.callback_query_handler(lambda call: call.data.startswith("vote_"))
async def process_vote(call: types.CallbackQuery):
    user_id = call.from_user.id

    

    visitor = active_sessions.get(user_id)
    if not visitor:
        await call.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.", show_alert=True)
        return

    _, nomination, candidate = call.data.split("_", 2)

    if is_voting_closed(nomination):
        await call.answer(f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –Ω–æ–º–∏–Ω–∞—Ü–∏—é '{nomination}' —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—ã –æ–ø–æ–∑–¥–∞–ª–∏!", show_alert=True)
        return

    if nomination not in active_nominations:
        await call.answer("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", show_alert=True)
        return

    if candidate not in active_nominations[nomination]:
        await call.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.", show_alert=True)
        return
    
    list_vote.append([nomination, candidate])


    if save_vote(asdict(visitor), nomination, candidate):
        setattr(visitor, f"top_{nomination.lower()}", candidate)  
        await call.message.reply(f"–í–∞—à –≥–æ–ª–æ—Å –∑–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ '{candidate}' –≤ –Ω–æ–º–∏–Ω–∞—Ü–∏–∏ '{nomination}' –ø—Ä–∏–Ω—è—Ç!")
        await call.answer("–í–∞—à –≥–æ–ª–æ—Å –ø—Ä–∏–Ω—è—Ç!")
    else:
        await call.answer(f"–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –Ω–æ–º–∏–Ω–∞—Ü–∏—é '{nomination}'.", show_alert=True)

    

@dp.message_handler(commands=["me"])
async def show_votes(message: types.Message):
    user_id = message.from_user.id
    visitor = active_sessions.get(user_id)

    if not visitor:
        await message.reply("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return

    reload_data()  
    user_data = check_user(visitor.surname, visitor.name, visitor.batchestvo, visitor.group)

    if not user_data:
        await message.reply("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    response = f"üë§ **–ì–æ–ª–æ—Å—É—é—â–∏–π:** {visitor.surname} {visitor.name} {visitor.batchestvo}, –≥—Ä—É–ø–ø–∞ {visitor.group}\n\n"
    response += "üìã **–ì–æ–ª–æ—Å–∞ –≤ –Ω–æ–º–∏–Ω–∞—Ü–∏—è—Ö:**\n"

    for column in user_data.keys():
        if column not in ["–§–∞–º–∏–ª–∏—è", "–ò–º—è", "–û—Ç—á–µ—Å—Ç–≤–æ", "–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã", "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"]:
            vote = str(user_data[column]).strip()
            print(vote)
            response += f"- {column}: {vote if vote!='0' and vote!=0 else '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –µ—â—ë –Ω–µ –±—ã–ª–æ –ª–∏–±–æ –∂–µ –≤—ã –æ–ø–æ–∑–¥–∞–ª–∏'}\n"

    await message.reply(response, parse_mode="Markdown")

@dp.message_handler(commands=["end"])
async def end_event(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    users = get_all_users()
    for user_id in users:
        try:
            await bot.send_message(
                chat_id=user_id,
                text="üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üôè\n\n\n\nP.S. –ü—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /contacts"
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await message.reply("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")

    await bot.session.close()  
    asyncio.get_event_loop().stop() 

@dp.message_handler(commands=["sendsend"])
async def send(message: types.Message):
    users = get_all_users()
    for user_id in set(users):
        try:
            await bot.send_message(chat_id=user_id, text=
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start —Å–Ω–æ–≤–∞."
            ) 
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

@dp.message_handler(lambda message: message.text and message.text.lower() == "—Ç–æ–ø")
async def top(message: types.Message):
    await message.reply("–ù–∞—Å—Ç—è —Ç–æ–ø –∞–π—Ç–∏ –ø–µ—Ä—Å–æ–Ω")


@dp.message_handler()
async def any_message(message: types.Message):
    await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é :(\n\n"
                         "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å, —Ç–æ –Ω–∞–ø–∏—à–∏ /vote *–Ω–æ–º–∏–Ω–∞—Ü–∏—è*\n\n"
                         "–í—Å–µ–≥–æ 7 –Ω–æ–º–∏–Ω–∞—Ü–∏–π:\n"
                         "\n1. TOP GROUP\n2. TOP CURATORS\n3. TOP HEADMAN\n4. TOP FRESHMAN\n5. TOP CREATIVE PERSON"
                         "\n6. TOP PROJECT\n7. TOP IT PERSON")
    



if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

